// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kessel/relations/v1/health.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KesselRelationsHealthService_GetLivez_FullMethodName  = "/kessel.relations.v1.KesselRelationsHealthService/GetLivez"
	KesselRelationsHealthService_GetReadyz_FullMethodName = "/kessel.relations.v1.KesselRelationsHealthService/GetReadyz"
)

// KesselRelationsHealthServiceClient is the client API for KesselRelationsHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KesselRelationsHealthServiceClient interface {
	GetLivez(ctx context.Context, in *GetLivezRequest, opts ...grpc.CallOption) (*GetLivezResponse, error)
	GetReadyz(ctx context.Context, in *GetReadyzRequest, opts ...grpc.CallOption) (*GetReadyzResponse, error)
}

type kesselRelationsHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKesselRelationsHealthServiceClient(cc grpc.ClientConnInterface) KesselRelationsHealthServiceClient {
	return &kesselRelationsHealthServiceClient{cc}
}

func (c *kesselRelationsHealthServiceClient) GetLivez(ctx context.Context, in *GetLivezRequest, opts ...grpc.CallOption) (*GetLivezResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLivezResponse)
	err := c.cc.Invoke(ctx, KesselRelationsHealthService_GetLivez_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselRelationsHealthServiceClient) GetReadyz(ctx context.Context, in *GetReadyzRequest, opts ...grpc.CallOption) (*GetReadyzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadyzResponse)
	err := c.cc.Invoke(ctx, KesselRelationsHealthService_GetReadyz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KesselRelationsHealthServiceServer is the server API for KesselRelationsHealthService service.
// All implementations must embed UnimplementedKesselRelationsHealthServiceServer
// for forward compatibility.
type KesselRelationsHealthServiceServer interface {
	GetLivez(context.Context, *GetLivezRequest) (*GetLivezResponse, error)
	GetReadyz(context.Context, *GetReadyzRequest) (*GetReadyzResponse, error)
	mustEmbedUnimplementedKesselRelationsHealthServiceServer()
}

// UnimplementedKesselRelationsHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKesselRelationsHealthServiceServer struct{}

func (UnimplementedKesselRelationsHealthServiceServer) GetLivez(context.Context, *GetLivezRequest) (*GetLivezResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLivez not implemented")
}
func (UnimplementedKesselRelationsHealthServiceServer) GetReadyz(context.Context, *GetReadyzRequest) (*GetReadyzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadyz not implemented")
}
func (UnimplementedKesselRelationsHealthServiceServer) mustEmbedUnimplementedKesselRelationsHealthServiceServer() {
}
func (UnimplementedKesselRelationsHealthServiceServer) testEmbeddedByValue() {}

// UnsafeKesselRelationsHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KesselRelationsHealthServiceServer will
// result in compilation errors.
type UnsafeKesselRelationsHealthServiceServer interface {
	mustEmbedUnimplementedKesselRelationsHealthServiceServer()
}

func RegisterKesselRelationsHealthServiceServer(s grpc.ServiceRegistrar, srv KesselRelationsHealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedKesselRelationsHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KesselRelationsHealthService_ServiceDesc, srv)
}

func _KesselRelationsHealthService_GetLivez_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLivezRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselRelationsHealthServiceServer).GetLivez(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselRelationsHealthService_GetLivez_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselRelationsHealthServiceServer).GetLivez(ctx, req.(*GetLivezRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselRelationsHealthService_GetReadyz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadyzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselRelationsHealthServiceServer).GetReadyz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselRelationsHealthService_GetReadyz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselRelationsHealthServiceServer).GetReadyz(ctx, req.(*GetReadyzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KesselRelationsHealthService_ServiceDesc is the grpc.ServiceDesc for KesselRelationsHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KesselRelationsHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kessel.relations.v1.KesselRelationsHealthService",
	HandlerType: (*KesselRelationsHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLivez",
			Handler:    _KesselRelationsHealthService_GetLivez_Handler,
		},
		{
			MethodName: "GetReadyz",
			Handler:    _KesselRelationsHealthService_GetReadyz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kessel/relations/v1/health.proto",
}
